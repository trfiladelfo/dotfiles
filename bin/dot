#! /usr/bin/env bash

help() {
cat <<-help

  Usage: dot <command>

  Commands:

    dot path add                  add the given directory to your path
    dot path list                 list all paths in your DOTFILES/PATH file
    dot path del                  remove a directory from your path

    dot list [program]

  Options:

    -h, --help      Display help information

help
  exit 0
}

abort() {
  echo $1 >&2 
  exit 1
}

#path command

path() {
  case $2 in
    list)
      for line in `awk '/^[^#]/ { print $1 }' $DOTFILES/PATH`
      do
        resolv=`eval echo $line`
        if [[ "$resolv" != "$line" ]]; then
          printf "$line\t=>\t$resolv\n"
        else
          printf "$line\n"
        fi
      done
      ;;
    add)
      if [ $# -ge 3 ]; then
        for i in `seq 3 $#`
        do
          if [ -e ${!i} ]; then
            echo "${!i}" >> $DOTFILES/PATH
          else
            abort "directory doesn't exist"
          fi
        done
      else
        help
      fi
      ;;
    del)
      for i in `seq 3 $#`
      do
        j=1
        for line in `awk '/^[^#]/ { print $1 }' $DOTFILES/PATH`
        do
          resolv=`eval echo $line`
          if [[ "$resolv" == "$3" ]]; then
            sed -i "${j}d" $DOTFILES/PATH 
          else
            j=`expr $j + 1`
          fi
        done
      done
      ;;
    *)
      help
      ;;
esac
}

VM_DIR=$DOTFILES/vm

#installing node

install_node() {
  VERSION=$1

  if [[ -n $VERSION ]]; then
    [ -e $VM_DIR/node/$VERSION ] &&  abort "$VERSION is already instaled"

    url=''
    if [[ -n "`curl -Is "http://nodejs.org/dist/v$VERSION/node-v$VERSION.tar.gz" | grep "200 OK"`" ]]; then
      url="http://nodejs.org/dist/v$VERSION/node-v$VERSION.tar.gz"
    elif [[ -n "`curl -Is "http://nodejs.org/dist/node-v$VERSION.tar.gz" | grep "200 OK"`" ]]; then
      url="http://nodejs.org/dist/node-v$VERSION.tar.gz"
    fi
    if ( [[ -n $url ]] &&
      mkdir -p $VM_DIR/node && cd $VM_DIR/temp && curl --progress-bar -o node-$VERSION.tar.gz -L $url \
      && tar -zxf node-$VERSION.tar.gz && cd node-v$VERSION && ./configure --prefix=$VM_DIR/node/$VERSION \
      && make install && rm -f $VM_DIR/temp/node-$VERSION.tar.gz )
    then
      if [ -e $VM_DIR/bin/node ]; then
        rm $VM_DIR/bin/node && cd $VM_DIR/bin && ln -s $VM_DIR/node/$VERSION/bin/node node
      else
        cd $VM_DIR/bin && ln -s $VM_DIR/node/$VERSION/bin/node node
      fi
      dot use "node" $VERSION
    else
      abort "instalation failed."
     fi
  fi
}

node_check_latest(){
    NODE_STABLE=`curl -s "http://nodejs.org/dist/latest/" | egrep -o -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1`
    NODE_UNSTABLE=`curl -s "http://nodejs.org/dist/" | egrep -o '[0-9+\.[0-9]+\.[0-9]+' | sort | tail -n 1`
}

node_list_versions(){
  if [[ -n $2 ]]; then
    if [[ $2 =~ ^[0-9]+\.[0-9]$ ]]; then
      curl -s "http://nodejs.org/dist/" | egrep -o "$2\.[0-9]+" | awk 'NR % 2 == 0' | sort
    elif [ $2 -ge 0 ]; then
      curl -s "http://nodejs.org/dist/" | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' | awk 'NR % 2 == 0' | sort | tail -n $2
    elif [ $2 -lt 0 ]; then
      curl -s "http://nodejs.org/dist/" | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' | awk 'NR % 2 == 0' | sort | head -n `((2 * -1))`
    fi
  else
    curl -s "http://nodejs.org/dist/" | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' | awk 'NR % 2 == 0' | sort
  fi
}

install_version() {
  if [[ $2 =~ [a-zA-Z]+@ ]]; then
    VERSION=`echo $2 | awk -F "@" '{ print $2 }'`
    VM=`echo $2 | awk -F "@" '{ print $1 }'`
  elif [ $# -eq 3 ]; then
    VERSION=$3
    VM=$2
  else
    help
  fi
  case $VM in
    node) install_node $VERSION;;
    ruby) install_ruby $VERSION;;
    rubinius) install_rubinius $VERSION;;
    *) help;;
esac
}

latest_version(){
  case $1 in
    node)
      node_check_latest
      echo "stable: $NODE_STABLE"
      echo "unstable: $NODE_UNSTABLE"
      ;;
    *) help;;
esac
}

list_versions(){
  case $1 in
    node) node_list_versions $@;;
    *) help;;
esac
}

use_version(){
  if [[ $2 =~ [a-zA-Z]+@ ]]; then
    VERSION=`echo $2 | awk -F "@" '{ print $2 }'`
    VM=`echo $2 | awk -F "@" '{ print $1 }'`
  elif [ $# -eq 3 ]; then
    VERSION=$3
    VM=$2
  else
    help
  fi

  if [ -d $VM_DIR/$VM/$VERSION ]; then
    [ -e $VM_DIR/bin/$VM ] && rm $VM_DIR/bin/$VM
    cd $VM_DIR/bin && ln -s $VM_DIR/$VM/$VERSION/bin/$VM $VM && echo "now using $VM version $VERSION"
  else
    abort "version $VERSION is not instaled"
  fi
}

if [ $# -ge 2 ]; then

  if [ ! `which curl` ]; then
    abort "curl is required"
  fi

  case $1 in
    install) install_version $@;;
    latest) latest_version $2;;
    list) list_versions $2 $3;;
    use) use_version $@;;
    path) path $@;;
  *) help;;
esac
else
  help
fi
